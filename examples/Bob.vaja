fn new() -> {"routes": [], "middlewares": []}

let newJSONResponse = fn (conn)
  conn \
  |> HashMap.insert("render", JSON.toJSON) \
  |> HashMap.insert("respHeaders", [["Content-Type", "application/json"]])
end

fn newPath(path)
  "^" ++ path ++ "$" |> String.split("/") |> String.join("\/") |> Regex.fromString()
end

fn newRedirect(status, url) -> {
  "headers": [["location", url]],
  "status": status
}

let addMiddlewares = HashMap.insert("middlewares")
let addRoutes = HashMap.insert("routes")
let addRoute404 = HashMap.insert("route404")

let halt = HashMap.insert("halted", true)
let isHalted = HashMap.hasKey("halted")

fn toResponse(conn)
  {
    "body": HashMap.get("respBody", "", conn),
    "status": HashMap.get("respStatus", 200, conn),
    "headers": HashMap.get("respHeaders", [], conn)
  }
end

fn makeHandler(app)
  fn (conn)
    let expandedMiddlewares = Array.map(fn (x) -> x(), app.middlewares)

    let updatedConn = \
      expandedMiddlewares \
      |> Array.map(Array.head) \
      |> Array.reduce(fn(acc, curr)
        if (isHalted(acc)) acc else curr(acc) end
      end, conn)

    if (isHalted(updatedConn))
      return updatedConn |> toResponse()
    end

    let matchingRoutes = matchRoute(app.routes, conn)
    let [route, routeArgs] = \
      if (Array.len(matchingRoutes) > 0)
        let [regex, handler] = \
          matchingRoutes |> Array.head()

        [handler, Regex.find(regex, conn.path)]
      else
        [app.route404, []]
      end

    expandedMiddlewares \
    |> Array.map(Array.last) \
    |> Array.reduce(
      fn(acc, curr) -> curr(acc),
      route(updatedConn, routeArgs)
    ) \
    |> toResponse()
  end
end

fn matchRoute(routes, conn)
  routes |> Array.filter(fn(route) -> Regex.contains(route[0], conn.path))
end


# Middlewares

fn enforceTrailingSlashMiddleware()
  let processReq = fn(conn)
    if (String.right(1, conn.path) != "/")
      conn \
      |> HashMap.insert("respHeaders", [["location", conn.path ++ "/"]]) \
      |> HashMap.insert("respStatus", 302) \
      |> halt()
    else
      conn
    end
  end
  [processReq, identity]
end

fn debugMiddleware()
  let processReq = fn(conn)
    print("-- Request --" ++ conn.path)
    print(conn)
    conn
  end
  let processResp = fn (conn)
    print("-- Response --")
    print(conn)
    conn
  end

  [processReq, processResp]
end

fn rendererMiddleware()
  let processResp = fn (conn)
    if HashMap.hasKey("render", conn)
      conn |> HashMap.insert("respBody", conn.render(conn.context))
    else
      conn
    end
  end

  [identity, processResp]
end
